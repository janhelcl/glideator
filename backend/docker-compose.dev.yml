services:
  frontend:
    build:
      context: ../frontend # Path to the frontend directory
      dockerfile: Dockerfile.dev # We might need to create this Dockerfile
    ports:
      - "3000:3000" # Expose React dev server port
    volumes:
      - ../frontend:/app # Mount frontend source code
      - /app/node_modules # Use container's node_modules
    environment:
      - NODE_ENV=development
      - CHOKIDAR_USEPOLLING=true # Helps with file watching in Docker
      - WATCHPACK_POLLING=true   # Alternative polling variable for react-scripts
      - REACT_APP_API_BASE_URL=http://localhost:8000 # Add API base URL for development
      - REACT_APP_VAPID_PUBLIC_KEY=BHAfrL8Yp-OnUKJtJQEj6rlTlNGM5698eTHWTnasHWbG4Uprw1P3j8Aec-DnqwvoAJFyHNEHNbgCxq7yZyiEuxM
    depends_on:
      - web # Ensure backend is ready (optional, depends on startup needs)
    command: npm start

  web:
    build:
      context: .
      dockerfile: Dockerfile.web
    ports:
      - "8000:8000" # Expose backend port for direct access (/docs)
    volumes:
      - .:/app # Mount backend source code for hot-reloading (if using uvicorn --reload)
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/glideator
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
      #- SQL_ECHO=true  # Enable SQL logging in development
      #- FORCE_INITIAL_DATA_LOAD=true
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    # Run migrations before starting the app; enable reload for development
    command: sh -lc "alembic -c alembic.ini upgrade head && uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload"

  postgres:
    image: postgres:16
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=glideator
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data # Use a separate volume for dev
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    command: ["redis-server", "--appendonly", "yes"]
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  celery-worker-beat: # Renamed from celery-worker
    build:
      context: .
      dockerfile: Dockerfile.worker
    volumes:
      - .:/app
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/glideator
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
      - VAPID_PRIVATE_KEY=DPHAJy32LlPSNDPvIh4kojgKjSrAqBRrt-IGnLeyT8E
      #- SQL_ECHO=true  # Enable SQL logging in development
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    # Start worker and beat; rely on web to run Alembic migrations
    command: celery -A app.celery_app worker -B --loglevel=info 

volumes:
  postgres_dev_data: # Separate named volume for development database 
